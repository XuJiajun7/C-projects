#include <iostream>
#include <cmath>
using namespace std;

bool ok(int q[], int c) {
    for(int i = 0; i < c; i++) {
        if (q[i] == q[c]) return false;
        if (c - i == abs(q[c] - q[i])) return false;
    }
    return true;
   // Reuse the ok function from your 1D 8 queens program.
}

// This function should return the number of solutions for the given board size (you don't need to print the solutions).
int nqueens(int n) {
   int *q = new int[n](); // Dynamically declare an array of size n and initialize the first element to 0.
   int c = 0, r = 0;   
   //q[0] = 0;// Start in the 1st row, 1st column
   int solutions = 0;
   while (c >= 0) { // End the loop if you backtrack from the first column
      c++;// Move to the next column
      if (c == n) {// If you have passed the last column,
         solutions++;
         c--;
         r = q[c]; //increment solutions and backtrack
      } else r = -1;// Otherwise, move to one before the first row
      
      while (c >= 0) {
         r++; // Move to the next row
         q[c] = r;
         bool check = ok(q, c); 
         if (q[c] == n) { 
             c--; // If you have passed the end of the column, backtrack
             r = q[c]; 
         }
         else if (check) {
             break; // Otherwise, call the ok function.  If it returns true, go back to the beginning of the outer loop.
         }
         
      }
   }// Reuse the code from your 1D 8 queens program to find the solutions (you may have to make changes).
   delete[] q;// Delete the array.
   return solutions;// Return the number of solutions.
}

int main() {
   int n = 12;
   for (int i = 1; i <= n; ++i)
      cout << "There are " << nqueens(i) << " solutions to the " << i << " queens problem.\n";
   return 0;
}
   
